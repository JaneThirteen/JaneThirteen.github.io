<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/02/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>笔记</title>
    <url>/2023/02/25/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-结构体的理解："><a href="#1-结构体的理解：" class="headerlink" title="1.结构体的理解："></a>1.结构体的理解：</h2><p>在C中结构体的定义常见有两种：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c">struck Student<br>&#123;<br>	<span class="hljs-type">int</span> num;<br>	<span class="hljs-type">char</span> name[<span class="hljs-number">20</span>]<br>	......<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>	struck Student stu[<span class="hljs-number">10</span>];<br>	......<br>	......<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> struck Student<br>&#123;<br>	<span class="hljs-type">int</span> num;<br>	<span class="hljs-type">char</span> name[<span class="hljs-number">20</span>]<br>	......<br>&#125;Stu_1;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>	Stu_1 stu[<span class="hljs-number">10</span>];<br>	......<br>	......<br>&#125;<br></code></pre></td></tr></table></figure>

<p>上面两种方式的比较可以看出区别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs 文本">struck Student stu[10]<br>Stu_1 stu[10]<br></code></pre></td></tr></table></figure>

<p>二者在引用声明上有所区别。</p>
<h2 id="2-typedef-的用法理解："><a href="#2-typedef-的用法理解：" class="headerlink" title="2.typedef 的用法理解："></a>2.typedef 的用法理解：</h2><h3 id="1理解"><a href="#1理解" class="headerlink" title="1理解"></a>1理解</h3><p>typedef 跟 struck 一样都为C语言的关键字，typedef 的作用是为一种数据类型定义一个新的名字，这里的数据类型包括内部数据类型 （int，char等），和自定义数据类型（struck等）。</p>
<h3 id="2用法及其作用"><a href="#2用法及其作用" class="headerlink" title="2用法及其作用"></a>2用法及其作用</h3><p>结合传统的声明变量进行改变：</p>
<p>【第一步】：int a；——传统声明变量表达式；</p>
<p>【第二步】：int New_name;——使用自定义的“<strong>类型名</strong>”代替“<strong>变量名</strong>” a；</p>
<p>【第三步】：typedef int New_name;——在语句开头加上 typedef，则 New_name 就是我们定义的 “<strong>新类型</strong>”；</p>
<p>【特别注意】：第一步，第二步用法是不合理的，这里仅仅为了方便记忆，在写代码时直接第三步即可。</p>
]]></content>
  </entry>
</search>
